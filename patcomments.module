<?php
/**
 * Implementation of hook_help().
 */
function patcomments_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('Displays and Manages Patron Comments');
  }
}

/**
 * Implementation of hook_perm().
 */
function patcomments_perm() {
  return array('access patcomments', 'administer patcomments');
}

/**
 * Implementation of hook_menu().
 */
function patcomments_menu() {
  $items = array();

  $items['admin/settings/contactus'] = array(
    'title' => t('Contact Us Settings'),
    'description' => 'Settings for Contact US',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('patcomments_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/contactus'] = array(
    'title' => 'Contact Us',
    'description' => 'View, plublish, and respond to Patron Comments.',
    'page callback' => 'patcomments_admin',
    'access arguments' => array('administer patcomments'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/contactus/edit'] = array(
    'title' => 'Edit Contact Us comments',
    'page callback' => 'patcomments_admin_edit',
    'access arguments' => array('administer patcomments'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/contactus/delete'] = array(
    'title' => 'Delete Contact Us comment',
    'page callback' => 'patcomments_admin_delete',
    'access arguments' => array('administer patcomments'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/contactus/list'] = array(
    'title' => 'Comment list',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/contactus/add'] = array(
    'title' => 'Add new comment',
    'page callback' => 'patcomments_admin_edit',
    'access arguments' => array('administer patcomments'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['contactus'] = array(
    'title' => 'Contact Us Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('patcomments_form'),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['contactus/comments'] = array(
    'title' => 'Patron comments',
    'page callback' => 'patcomments_display',
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['aapd/feedback'] = array(
    'title' => 'AAPD Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("aapd"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['aafounders/feedback'] = array(
    'title' => 'Ann Arbor Founders Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("aafounders"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['cooks/feedback'] = array(
    'title' => 'Ann Arbor Cooks Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("cooks"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['planning/feedback'] = array(
    'title' => 'Planning Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("planning"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['aareads/feedback'] = array(
    'title' => 'AA Reads Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("aareads"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['moaa/feedback'] = array(
    'title' => 'MOAA Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("moaa"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['aastreets/feedback'] = array(
    'title' => 'AA Streets Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("aastreets"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );
  $items['gallery/pictureAnnArbor/feedback'] = array(
    'title' => 'pictureAnnArbor Feedback Form',
    'page callback' => 'patcomments_form',
    'page arguments' => array("pictureAnnArbor"),
    'access arguments' => array('access patcomments'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function patcomments_settings() {
  $form['patcomments_institution_name'] = array(
    '#type' => 'textfield',
    '#title' => t("Institution Name"),
    '#default_value' => variable_get('patcomments_institution_name', NULL),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t("Short name of the Institution, e.g. AADL"),
  );
  $form['patcomments_suggest_email'] = array(
    '#type' => 'textfield',
    '#title' => t("Suggest Email"),
    '#default_value' => variable_get('patcomments_suggest_email', NULL),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t("Email address for the automatic response on suggestions"),
  );
  return system_settings_form($form);
}

/**
 * Return a listing of all patron comments.
 */
function patcomments_admin() {
  global $user;
  drupal_add_css(drupal_get_path('module', 'patcomments') . '/patcomments.css', 'module', 'all', FALSE);

  list($type, $status, $refer, $number) = explode(',', variable_get('patcomments_filter_vars_' . $user->uid, NULL));

  $sql = 'SELECT * FROM {comment} WHERE 1';
  if ($type) {
    $sql .= ' AND type = ' . $type;
  }
  if ($status) {
    $sql .= ' AND status = ' . $status;
  }
  if ($refer) {
    $sql .= ' AND refer_to = ' . $refer;
  }
  if ($number) {
    $sql .= ' AND com_id LIKE "' . $number . '%"';
  }

  $header = array(
    array('data' => t('id'), 'field' => 'com_id', 'sort' => 'desc'),
    array('data' => t('Date Received'), 'field' => 'date_received'),
    array('data' => t('Type'), 'field' => 'type'),
    array('data' => t('Status'), 'field' => 'status'),
    array('data' => t('Refer'), 'field' => 'refer_to'),
    array('data' => t('Source'), 'field' => 'source'),
    array('data' => t('Publish'), 'field' => 'publish'),
    array('data' => t('Operations'), 'colspan' => '2')
  );
  $sql .= tablesort_sql($header);

  db_set_active('patcomments');
  $result = pager_query($sql, 50);
  db_set_active('default');

  $comment_types = array();
  foreach (_patcomments_get_types() as $row) {
    $comment_types[$row['ty_id']] = $row['type'];
  }

  $comment_status = _patcomments_get_statuses();

  $comment_refer = array();
  $refers = _patcomments_get_refers();
  foreach ($refers as $refer) {
    $comment_refer[$refer['ref_id']] = $refer['refer_to'];
  }

  $comment_source = _patcomments_get_sources();

  $comment_publish = array(0 => "No", 1 => "Yes");

  $destination = drupal_get_destination();
  while ($data = db_fetch_object($result)) {
    $rows[] = array(l($data->com_id, "admin/contactus/edit/$data->com_id"), $data->date_received, $comment_types[$data->type], $comment_status[$data->status], $comment_refer[$data->refer_to], $comment_source[$data->source], $comment_publish[$data->publish], l(t('edit'), "admin/contactus/edit/$data->com_id"), l(t('delete'), "admin/contactus/delete/$data->com_id", array(), $destination));
  }

  if ($pager = theme('pager', NULL, 50, 0)) {
    $rows[] = array(array('data' => $pager, 'colspan' => '9'));
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No Patron Comments available.'), 'colspan' => '9'));
  }
  $filter_form = "<div id=\"filter_form\">" .
                 drupal_get_form('patcomments_filter_form', $comment_types, $comment_status, $comment_refer) .
                 "</div>";

  return $filter_form . theme('table', $header, $rows);
}

function patcomments_filter_form($form_state, $comment_types, $comment_status, $comment_refer) {
  global $user;

  $all_option = array("All");
  $comment_types = $all_option + $comment_types;
  $comment_status = $all_option + $comment_status;
  $comment_refer = $all_option + $comment_refer;

  list($default_type, $default_status, $default_refer, $default_number) = explode(',', variable_get('patcomments_filter_vars_' . $user->uid, NULL));

  $form['filter_type'] = array('#type' => 'select',
                               '#title' => "Type",
                               '#default_value' => $default_type,
                               '#options' => $comment_types);
  $form['filter_status'] = array('#type' => 'select',
                                 '#title' => "Status",
                                 '#default_value' => $default_status,
                                 '#options' => $comment_status);
  $form['filter_refer'] = array('#type' => 'select',
                                '#title' => "Refer",
                                '#default_value' => $default_refer,
                                '#options' => $comment_refer);
  $form['filter_number'] = array('#type' => 'textfield',
                                '#title' => "ID",
                                '#default_value' => $default_number ? $default_number : '',
                                '#size' => "10");
  $form['filter_submit'] = array('#type' => 'submit',
                                 '#value' => "Filter");
  return $form;
}

function patcomments_filter_form_submit($form, &$form_state) {
  global $user;

  variable_set('patcomments_filter_vars_' . $user->uid,
               intval($form_state['values']['filter_type']) . ',' .
               intval($form_state['values']['filter_status']) . ',' .
               intval($form_state['values']['filter_refer']) . ',' .
               intval($form_state['values']['filter_number']));
}

/**
 * Menu callback; handles pages for creating and editing patron comments.
 */
function patcomments_admin_edit($com_id = 0) {
  if ($com_id) {
    $output = drupal_get_form('patcomments_admin_form', patcomments_load($com_id));
  }
  else {
    $output = drupal_get_form('patcomments_admin_form');
  }
  return $output;
}

/**
 * Menu callback; handles deletion of a patron comment.
 */
function patcomments_admin_delete($com_id = 0, $confirm = "NO") {
  $patcomment = patcomments_load($com_id);

  if ($patcomment['com_id']) {
    if ($confirm == "CONFIRMED") {
      db_set_active('patcomments');
      db_query('DELETE FROM {comment} WHERE com_id = %d', $com_id);
      db_set_active('default');
      cache_clear_all();
      drupal_set_message(t('The Patron Comment has been deleted.'));
      drupal_goto('admin/contactus');
    } else {
      $content .= "Are you sure you want to delete patron comment #$com_id?";
      $content .= "<h2>[&nbsp;" . l("DELETE", $_GET['q'] . "/CONFIRMED") . "&nbsp;]</h2>";
    }
  } else {
    drupal_set_message(t('The comment no longer exists.'));
  }
  print theme('page', $content);
}

/**
 * Return a form for editing or creating a patron comment.
 */
function patcomments_admin_form($form_state, $edit = '') {
  $form['date_received'] = array(
    '#type' => 'textfield',
    '#title' => t('Date Received'),
    '#default_value' => $edit['date_received'],
    '#size' => 30,
    '#maxlength' => 10,
    '#description' => t('write date in yyyy/mm/dd format'),
  );
  foreach (_patcomments_get_types() as $row) {
    $options[$row['ty_id']] = $row['type'];
  }
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Comment Type'),
    '#default_value' => $edit['type'],
    '#options' => $options,
    '#description' => t('select a subject type for your comment'),
  );
  $form['source'] = array(
    '#type' => 'select',
    '#title' => t('Comment Source'),
    '#default_value' => $edit['source'],
    '#options' => _patcomments_get_sources(),
    '#description' => t('select a source material ex. letter, card etc'),
  );
  $form['regarding'] = array(
    '#type' => 'select',
    '#title' => t('Comment Regarding'),
    '#default_value' => $edit['regarding'],
    '#options' => _patcomments_get_regardings(),
    '#description' => t('select a comment regarding option'),
  );
  $form['location'] = array(
    '#type' => 'select',
    '#title' => t('Location'),
    '#default_value' => $edit['location'],
    '#options' => _patcomments_get_locations(),
    '#description' => t('select a location'),
  );
  $form['staff'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of staff member'),
    '#default_value' => $edit['staff'],
    '#size' => 30,
   '#maxlength' => 15,
    '#description' => t('Write staff members full name'),
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Patrons Full Name'),
    '#default_value' => $edit['name'],
    '#size' => 30,
    '#maxlength' => 50,
    '#description' => t('Write patrons full name'),
  );
   $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Patrons address'),
    '#default_value' => $edit['address'],
    '#size' => 30,
    '#maxlength' => 50,
    '#description' => t('patrons address'),
  );
  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $edit['city'],
    '#size' => 30,
    '#maxlength' => 20,
    '#description' => t('city'),
  );
  $form['state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#default_value' => $edit['state'],
    '#size' => 10,
    '#maxlength' => 2,
    '#description' => t('state'),
  );
  $form['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip'),
    '#default_value' => $edit['zip'],
    '#size' => 20,
    '#maxlength' => 10,
    '#description' => t('zip'),
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $edit['phone'],
    '#size' => 30,
    '#maxlength' => 15,
    '#description' => t('phone ex. (734)327-4200'),
  );
  $form['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment/Message'),
    '#default_value' => $edit['comments'],
    '#cols' => 60,
    '#rows' => 10,
    '#description' => t('Write patrons comment/message'),
  );

  // PATRON EMAIL SECTION /////
  $refers = _patcomments_get_refers();
  $form['email_from'] = array(
    '#type' => 'textfield',
    '#title' => t('Email From'),
    '#default_value' => $refers[$edit['refer_to']]['refer_value'],
    '#size' => 30,
    '#maxlength' => 50,
    '#description' => t('Address the email will be from'),
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $edit['email'],
    '#size' => 30,
    '#maxlength' => 50,
    '#description' => t('Patron email address'),
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => variable_get('patcomments_institution_name', NULL) . ' ' . t('Reply'),
    '#default_value' => $edit['notes'],
    '#cols' => 60,
    '#rows' => 10,
    '#description' => t('Write') . ' ' . variable_get('patcomments_institution_name', NULL) . ' ' . t('Reply'),
  );
  $form['email_patron'] = array(
    '#type' => 'submit',
    '#value' => t('Email Response to Patron'),
  );
  $form['date_resolved'] = array(
    '#type' => 'textfield',
    '#title' => t('Date Resolved'),
    '#default_value' => $edit['date_resolved'],
    '#size' => 30,
    '#maxlength' => 10,
    '#description' => t('ex. yyyy/mm/dd'),
  );
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => $edit['status'],
    '#options' => _patcomments_get_statuses(),
    '#description' => t('change status'),
  );
  foreach ($refers as $ref_id => $refer) {
    $ref_options[$ref_id] = $refer['refer_to'];
  }
  $form['refer_to_orig'] = array(
    '#type' => 'hidden',
    '#value' => $edit['refer_to'],
  );
  $form['refer_to'] = array(
    '#type' => 'select',
    '#title' => t('Refer Comment to'),
    '#default_value' => $edit['refer_to'],
    '#options' => $ref_options,
    '#description' => t('Send Comment to... (Email will be sent)'),
  );
  $form['publish'] = array(
    '#type' => 'checkbox',
    '#title' => t('Publish Comment?'),
    '#return_value' => 1,
    '#default_value' => $edit['publish'],
  );
  $form['web_info'] = array(
    '#type' => 'hidden',
    '#value' => $edit['web_info'],
  );

  if ($edit['com_id']) {
    $form['com_id'] = array(
      '#type' => 'hidden',
      '#value' => $edit['com_id'],
    );
    $form[] = array(
      '#type' => 'submit',
      '#value' => t('Update Comment'),
    );
  }
  else {
    $form[] = array(
      '#type' => 'submit',
      '#value' => t('Create new Comment'),
    );
  }

  return $form;
}

function patcomments_admin_form_submit($form, &$form_state)
{
  if ($_POST['op'] == t('Email Response to Patron')) {
    if ($form_state['values']['com_id'] > 0)  {
      // Existing Comment
      patcomments_admin_update($form_state['values'], FALSE);
      $com_id = $form_state['values']['com_id'];
    }
    else {
      // New Comment
      patcomments_admin_insert($form_state['values'], FALSE);
      $com_id = mysql_insert_id();
    }

    // Close comment
    $todays_date = date("Y-m-d");

    // Get "Closed-Emailed" status code
    db_set_active('patcomments');
    $row = db_fetch_object(db_query("SELECT stat_id FROM {status} WHERE status = 'Closed-emailed'"));
    db_set_active('default');
    $status_code = $row->stat_id;

    db_set_active('patcomments');
    db_query("UPDATE comment SET date_resolved = '%s', status = %d WHERE com_id = %d", $todays_date, $status_code, $com_id);
    db_set_active('default');

    $email_from = (trim($form_state['values']['email_from']) ? trim($form_state['values']['email_from']) : variable_get('patcomments_suggest_email', NULL));
    patcomments_email_status($com_id, 'patron', $email_from);

    drupal_set_message(t('Patron Email Sent. Status set to Closed. Ready for redaction before publish'));
    drupal_goto('admin/contactus/edit/' . $com_id);
  }
  else if ($_POST['op'] == t('Update Comment')) {
    $output = patcomments_admin_update($form_state['values']);
  }
  else if ($_POST['op'] == t('Create new Comment')){
    $output = patcomments_admin_insert($form_state['values']);
  }
}

/**
 * Fetch a specific patron comment from the database.
 */
function patcomments_load($com_id) {
  db_set_active('patcomments');
  $result = db_fetch_array(db_query('SELECT * FROM {comment} WHERE com_id = %d', $com_id));
  db_set_active('default');
  return $result;
}

/**
 * update record.
 */
function patcomments_admin_update($edit, $return_to_overview = TRUE) {
  db_set_active('patcomments');
  db_query("UPDATE {comment} SET type='%s', source='%s', location='%s', staff='%s', regarding='%s', comments='%s', " .
           "name='%s', address='%s', city='%s', state='%s', zip='%s', phone='%s', email='%s', date_received='%s', " .
           "status='%s', date_resolved='%s', notes='%s', web_info='%s', refer_to='%s', publish='%s' WHERE com_id = %d",
           $edit['type'], $edit['source'], $edit['location'], $edit['staff'], $edit['regarding'],  $edit['comments'],
           $edit['name'], $edit['address'], $edit['city'], $edit['state'], $edit['zip'], $edit['phone'], $edit['email'],
           $edit['date_received'], $edit['status'], $edit['date_resolved'], $edit['notes'], $edit['web_info'],
           $edit['refer_to'], $edit['publish'], $edit['com_id']);
  db_set_active('default');

  $email_from = (trim($edit['email_from']) ? trim($edit['email_from']) : variable_get('patcomments_suggest_email', NULL));

  if ($edit['refer_to'] != $edit['refer_to_orig'])
    patcomments_email_status($edit['com_id'], 'staff', $email_from);

  cache_clear_all();
  drupal_set_message(t('The Patron Comment has been updated.'));
  if ($return_to_overview) {
    drupal_goto('admin/contactus');
  }
}

/**
 * insert record.
 */
function patcomments_admin_insert($edit, $return_to_overview = TRUE) {
  db_set_active('patcomments');
  db_query("INSERT INTO {comment} (type, source, location, staff, regarding, comments, name, address, city, state, zip, phone, " .
           "email, date_received, status, date_resolved, notes, web_info, refer_to, publish) " .
           "VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')",
           $edit['type'], $edit['source'], $edit['location'], $edit['staff'], $edit['regarding'], $edit['comments'], $edit['name'],
           $edit['address'], $edit['city'], $edit['state'], $edit['zip'], $edit['phone'], $edit['email'], $edit['date_received'],
           $edit['status'], $edit['date_resolved'], $edit['notes'], $edit['web_info'], $edit['refer_to'], $edit['publish']);
  db_set_active('default');

  $edit['com_id'] = mysql_insert_id();

  $email_from = (trim($edit['email_from']) ? trim($edit['email_from']) : variable_get('patcomments_suggest_email', NULL));

  if ($edit['send_email'] == 1) {
    patcomments_email_status($edit['com_id'], 'patron', $email_from);
  }
  if ($edit['refer_to'] != $edit['refer_to_orig']) {
    patcomments_email_status($edit['com_id'], 'staff', $email_from);
  }

  cache_clear_all();
  drupal_set_message(t('The Patron Comment #' . $edit['com_id'] . ' has been added.'));
  if ($return_to_overview) {
    drupal_goto('admin/contactus');
  }
}

/**
 * Send an email with a comment's status
 */
function patcomments_email_status($com_id, $to_whom = 'staff', $email_from = '') {
  if (empty($email_from)) {
    $email_from = variable_get('patcomments_suggest_email', NULL);
  }

  $comment_data = patcomments_load($com_id);

  // Get Feedback Type
  db_set_active('patcomments');
  $row = db_fetch_object(db_query("SELECT * FROM {type} WHERE ty_id = %d", $comment_data['type']));
  $email_subject = variable_get('patcomments_institution_name', NULL) . " Patron Comment Update: " . $row->type . " ($com_id)";
  db_set_active('default');

  $email_message = "\n" . str_pad(" $com_id Patron Comments ", 40, "-", STR_PAD_BOTH) . "\n";

  if ($to_whom == 'staff' || strpos($to_whom, "@")) {
    $email_message .= "\nOpen the following link to administer:\n" .
                      url("admin/contactus/edit/$com_id", array('absolute' => TRUE)) .
                      "\n\n" . str_pad("", 40, "-") . "\n\n";

    $lookup_fields = array("type:type:ty_id" => "type",
                           "source:source:sou_id" => "source",
                           "loc_name:location:loc_id" => "location",
                           "status:status:stat_id" => "status",
                           "refer_to:refer_comment:ref_id" => "refer_to");

    foreach($comment_data as $field => $field_data) {
      $lookup_code = array_search($field, $lookup_fields);
      if ($lookup_code) {
        $sql_fields = explode(":", $lookup_code);
        db_set_active('patcomments');
        $row = db_fetch_array(db_query("SELECT %s FROM %s WHERE %s = %d", $sql_fields[0], $sql_fields[1], $sql_fields[2], $field_data));
        db_set_active('default');
        $col_name = (string)$sql_fields[0];
        $field_data = $row[$col_name];
      }

      $field_data = str_replace("\n", str_pad("\n", 17), $field_data);
      $email_message .= str_pad($field . ":", 15) . " $field_data\n";
    }

    // Get referal email address
    if (strpos($to_whom, "@"))
      $email_to = $to_whom;
    else {
      db_set_active('patcomments');
      $row = db_fetch_object(db_query("SELECT * FROM {refer_comment} WHERE ref_id=%d", $comment_data['refer_to']));
      $email_to = $row->refer_value;
      db_set_active('default');
    }
  }
  else {
    $email_to = $comment_data['email'];

    $email_message .= "\n" . $comment_data['comments'] .
                      "\n\n-- Library Response --\n\n" .
                      $comment_data['notes'];
  }

  $headers = "From: $email_from" . "\r\n" .
             "Reply-To: $email_from" . "\r\n" .
             "X-Mailer: PHP/" . phpversion() .
             "Content-Type: text/html; charset=\"us-ascii\"";
  mail($email_to, $email_subject, $email_message, $headers);
}

/*========================
  A simple page callback
========================*/

function patcomments_display($regarding = 0, $type = 0, $num_per_page = 10) {
  drupal_add_css(drupal_get_path('module', 'patcomments') . '/patcomments.css', 'module', 'all', FALSE);

  $content = "<h2 class=\"title\">What you have told us</h2>" .
  $content .= "<p>Here you can search through numerous patron comments and the corresponding " . variable_get('patcomments_institution_name', NULL) . " replies. ";
  $content .= "Search by the type of comment, in general by what the comment is regarding, or by a particular issue.</p>";
  $content .= "<p>We care about what you have to say, and do our best to address each and every concern.</p>";
  $content .= "<p>Please let us know how we're doing by " . l("submitting a comment or suggestion", "contactus") . "</p>";

  $content .='<h3>Search Patron Comments</h3>';

  $content .= "<div id=\"filter_form\">" .
              drupal_get_form('patcomments_search_form', $regarding, $type, $num_per_page) .
              "</div>";

  $sql = "SELECT * FROM {comment} WHERE publish = 1";

  $regarding = intval($regarding);
  $type = intval($type);
  if ($regarding)
    $sql .= " AND regarding = $regarding";
  if ($type)
    $sql .= " AND type = $type";

  $sql .= " ORDER BY date_received DESC";

  db_set_active('patcomments');
  $result = pager_query($sql, $num_per_page);
  db_set_active('default');

  $content .= theme('pager', NULL, $num_per_page, 0);

  $comment_types = _patcomments_get_types();
  $comment_regardings = _patcomments_get_regardings();
  while ($data = db_fetch_object($result)) {
    $content .= "<strong>Date Received: </strong>" . $data->date_received . "<br />" .
                "<strong>Type: </strong>" . $comment_types[$data->type]['type'] . "<br />" .
                "<strong>Regarding: </strong>" . $comment_regardings[$data->regarding] . "<br />" .
                "<p><strong>Patron Comment: </strong>" . $data->comments . "</p>" .
                "<p><strong>" . variable_get('patcomments_institution_name', NULL) . " Reply: </strong>" . $data->notes . "</p><hr>";
  }

  $content .= theme('pager', NULL, 10, 0);

  return $content;
}

function patcomments_search_form($form_state, $regarding_id = 0, $type_id = 0, $num_per_page = 10) {
  $types = $regardings = array(0 => "All");

  $regardings = $regardings + _patcomments_get_regardings();
  foreach(_patcomments_get_types() as $type) {
    if ($type['pub_display']) {
      $types[$type['ty_id']] = $type['type'];
    }
  }

  $form['filter_regarding'] = array('#type' => 'select',
                                    '#title' => "Comment Regarding",
                                    '#options' => $regardings,
                                    '#default_value' => $regarding_id);
  $form['filter_type'] = array('#type' => 'select',
                               '#title' => "Comment Type",
                               '#options' => $types,
                               '#default_value' => $type_id);
  $form['num_per_page'] = array('#type' => 'select',
                                '#title' => "Results Per Page",
                                '#options' => array(5 => "5", 10 => "10", 25 => "25", 50 => "50", 100 => "100"),
                                '#default_value' => $num_per_page);
  $form['filter_submit'] = array('#type' => 'submit',
                                 '#value' => "Search");
  return $form;
}

function patcomments_search_form_submit($form, &$form_state) {
  drupal_goto("contactus/comments/" .
              $form_state['values']['filter_regarding'] . "/" .
              $form_state['values']['filter_type'] . "/" .
              $form_state['values']['num_per_page'] . "/"
              );
}

/*========================
  The contactus Form
========================*/
function patcomments_form($form_state, $pathCode = NULL) {
  global $user, $base_url;
  drupal_add_js(drupal_get_path('module', 'patcomments') . '/patcomments.js');

  if (($pathCode != "aareads") && ($pathCode != "aafounders")) {
    $content .='<p>By using the form below, your suggestion, question or feedback will automatically be directed to the appropriate department.</p>';
    $content .='<p>Or if you prefer, please feel free to call us using one of the following numbers:</p>';
    $content .='<p><strong>All library facilities can be reached by phone through the main switchboard: (734) 327-4200</strong></p>';
    $content .='<p><strong>Our mailing address is: 343 South Fifth Avenue, Ann Arbor, MI 48104</strong></p>';
    $content .='<p>Material requests and renewals: (734) 327-4219<br>
                Reference desk: (734) 327-4525<br>
                Washtenaw Library for the Blind and Physically Disabled: (734) 327-4224<br>
                Human Resources: (734) 327-8304<br>
                Community Relations (programs and events): (734) 327-4265<br>
                Administration, Josie Parker, Library Director: (734) 327-4263</p>';
    $form['introduction_message'] = array(
      '#value' => $content,
    );
  }

  // Get "suggest an item" type
  db_set_active('patcomments');
  $row = db_fetch_object(db_query("SELECT ty_id FROM {type} WHERE type = 'suggest a title'"));
  db_set_active('default');
  $suggest_item_type = $row->ty_id;

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Full Name'),
    '#default_value' => '',
    '#size' => 50,
    '#maxlength' => 64,
    '#description' => t('Write your full name'),
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $user->mail,
    '#size' => 50,
    '#maxlength' => 64,
    '#description' => t('Your email address'),
  );

  if (!empty($pathCode)) {
    db_set_active('patcomments');
    $row = db_fetch_object(db_query("SELECT * FROM {type} WHERE pathcode = '%s' LIMIT 1", $pathCode));
    db_set_active('default');
    $ty_options = array($row->ty_id => $row->type);

    $form['ty_id'] = array(
      '#type' => 'select',
      '#title' => t('Comment Type'),
      '#default_value' => $row->ty_id,
      '#options' => $ty_options,
      '#description' => t('The subject type for your comment'),
      '#attributes' => array("style" => "border: 1px solid")
    );
    $contact_form .= '<br />';

    if ($row->ty_id == $suggest_item_type) {
      db_set_active('patcomments');
      $result = db_query("SELECT * FROM {suggest_categories} ORDER by suggest_categories.description ASC");
      db_set_active('default');

      $sug_options = array("" => "- CHOOSE CATEGORY -");
      while ($row = db_fetch_object($result)) {
        if ($row->description != "Other") // put other at the end
          $sug_options[$row->id] = $row->description;
        else
          $other_option = array($row->id => $row->description);
      }
      $sug_options = $sug_options + $other_option;

      $form['sug_id'] = array(
        '#type' => 'select',
        '#title' => t('Suggest Category'),
        '#default_value' => '',
        '#options' => $sug_options,
        '#description' => t('please help us route your suggestion'),
        '#attributes' => array("style" => "border: 1px solid")
      );
      $contact_form .= $suggest_select . '<br />';
    }
  }
  else {
    db_set_active('patcomments');
    $result = db_query("SELECT * FROM {type} WHERE pub_display = 1 ORDER BY type ASC");
    db_set_active('default');

    $ty_options = array("" => "- CHOOSE TYPE -");
    while ($row = db_fetch_object($result)) {
      if ($row->type != "other")  { // put other at the end
        $ty_options[$row->ty_id] = $row->type;
      }
      else {
        $other_option = array($row->ty_id => $row->type);
      }
    }
    $ty_options = $ty_options + $other_option;

    $form['ty_id'] = array(
      '#type' => 'select',
      '#title' => t('Comment Type'),
      '#default_value' => '',
      '#options' => $ty_options,
      '#description' => t('select a subject type for your comment'),
      '#attributes' => array("onChange" => "checkForSuggest(this, $suggest_item_type)", "style" => "border: 1px solid")
    );
    $contact_form .= '<br />';

    db_set_active('patcomments');
    $result = db_query("SELECT * FROM {suggest_categories} ORDER by suggest_categories.description ASC");
    db_set_active('default');

    $sug_options = array("" => "- CHOOSE CATEGORY -");
    while ($row = db_fetch_object($result)) {
      if ($row->description != "Other") { // put other at the end
        $sug_options[$row->id] = $row->description;
      }
      else {
        $other_option = array($row->id => $row->description);
      }
    }
    $sug_options = $sug_options + $other_option;

    $suggest_style = ($_GET['ty_id'] == $suggest_item_type ? "" : " style=\"display: none\"");

    $form['sug_id'] = array(
      '#prefix' => "<div id=\"suggest_category_div\"$suggest_style>",
      '#type' => 'select',
      '#title' => t('Suggest Category'),
      '#default_value' => '',
      '#options' => $sug_options,
      '#description' => t('please help us route your suggestion'),
      '#attributes' => array("style" => "border: 1px solid"),
      '#suffix' => "</div>"
    );

    $contact_form .= str_replace("class=\"form-item\"", "class=\"form-item\" id=\"suggest_category_div\"$suggest_style", $suggest_select);
    $contact_form .= '<br />';
  }

  // If path passed in, Include it on first line of message
  $default_comment = ($_GET['refpath'] ? "Referring URL: $base_url/" . $_GET['refpath'] . "\n-------- Please assist by describing the problem here: --------\n" : "");
  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment/Message'),
    '#default_value' => $default_comment,
    '#cols' => 60,
    '#rows' => 10,
    '#description' => t('Write your message'),
  );

  $contact_form .='<br />';
  $form['ip'] = array(
    '#type' => 'hidden',
    '#value' => $_SERVER['REMOTE_ADDR'],
  );
  $form['referring_page'] = array(
    '#type' => 'hidden',
    '#value' => $_SERVER[HTTP_REFERER],
  );
  $form[] = array(
    '#type' => 'submit',
    '#value' => t('Send Comment'),
  );

  $contact_javascript = array("onSubmit" => "return checkType()");
  $form['#method'] = "post";
  $form['#action'] = "";
  $form['#attributes'] = $contact_javascript;

  return $form;
}

function theme_patcomments_form($form) {
  $output = '';
  $output .= form_render($form['name']);
  $output .= '<br />';
  $output .= form_render($form['email']);
  $output .= '<br />';
  $output .= form_render($form['ty_id']);
  $output .= '<br />';
  $output .= form_render($form['sug_id']);
  $output .= '<br />';
  $output .= form_render($form);

  return $output;
}

function patcomments_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('Invalid email entered, please correct.'));
  }
  if (strpos($form_state['values']['comment'], "a href")) {
    form_set_error('comment', t('Sorry, no HTML links are allowed in your comment'));
  }
  if (empty($form_state['values']['ty_id'])) {
    form_set_error('ty_id', t('Please select a Comment Type'));
  }
}

function patcomments_form_submit($form, &$form_state) {
  // Parse input
  $input_email = trim($form_state['values']['email']);
  $input_name = trim($form_state['values']['name']);
  $input_comments = trim($form_state['values']['comment']);
  $input_ip = $form_state['values']['ip'];
  $input_referring_page = trim($form_state['values']['referring_page']);
  $input_type = intval($form_state['values']['ty_id']);

  // Setup standard fields
  db_set_active('patcomments');
  $row = db_fetch_object(db_query("SELECT sou_id FROM {source} WHERE source = 'website'"));
  db_set_active('default');

  $input_source = $row->sou_id; // WEBSITE

  db_set_active('patcomments');
  $row = db_fetch_object(db_query("SELECT loc_id FROM {location} WHERE loc_name = 'online'"));
  db_set_active('default');
  $input_location = $row->loc_id; // ONLINE

  // Determine status (AutoClose?)
  db_set_active('patcomments');
  $row = db_fetch_object(db_query("SELECT autoclose FROM {type} WHERE ty_id = $input_type"));
  db_set_active('default');
  $autoClose = $row->autoclose;

  // Get "suggest an item" type
  db_set_active('patcomments');
  $row = db_fetch_object(db_query("SELECT ty_id FROM {type} WHERE type = 'suggest a title'"));
  db_set_active('default');
  $suggest_item_type = $row->ty_id;

  if ($autoClose) {
    db_set_active('patcomments');
    $row = db_fetch_object(db_query("SELECT stat_id FROM {status} WHERE status = 'AutoClose'"));
    db_set_active('default');
  }
  else {
    db_set_active('patcomments');
    $row = db_fetch_object(db_query("SELECT stat_id FROM {status} WHERE status = 'New'"));
    db_set_active('default');
  }

  $input_status = $row->stat_id;

  $input_date = date("Y-m-d");

  $input_web_info = "website_name: " . $user->name . "\n" .
                    "referring_page: " . $input_referring_page . "\n" .
                    "ip_address: " . $input_ip . "\n" .
                    "browser_info: " . $_SERVER['HTTP_USER_AGENT'];

  // Get initial referral information
  db_set_active('patcomments');
  $row = db_fetch_object(db_query("SELECT * FROM {type}, {refer_comment} WHERE type.init_refer = refer_comment.ref_id AND type.ty_id = %d", $input_type));
  db_set_active('default');

  $input_staff = $row->refer_to;
  $input_refer = $row->ref_id;
  $email_to = $row->refer_value;

  if ($input_type == $suggest_item_type) {
    if ($form_state['values']['sug_id'] == "") {
      // Get "suggest other" category
      db_set_active('patcomments');
      $row = db_fetch_object(db_query("SELECT id FROM {suggest_categories} WHERE description = 'Other'"));
      db_set_active('default');
      $form_state['values']['sug_id'] = $row->id;
    }

    // send directly to materials assignee
    db_set_active('patcomments');
    $row = db_fetch_object(db_query("SELECT * FROM {suggest_categories} WHERE id = %d", $form_state['values']['sug_id']));
    db_set_active('default');

    // Send to selector
    $email_to = $row->email;

    // Setup immediate reply to suggestion
    if (valid_email_address($input_email)) {
      $reply_subject = "Thank you for your library suggestion";

      $reply_text = "Thank you for your suggestion for the purchase of library materials. " .
                    "All suggestions are valued and receive serious consideration. " .
                    "If the title you have suggested is ordered for the collection, " .
                    "it will soon appear in the library catalog and you may place a request at that time. " .
                    "Thank you very much!\n\n" .
                    "{$row->name}\n" .
                    "Librarian/Selector\n" .
                    "Ann Arbor District Library";

      $reply_headers = "From: {$row->name} <{$row->email}>" . "\r\n" .
                       "Reply-To: {$row->name} <{$row->email}>" . "\r\n" .
                       "X-Mailer: PHP/" . phpversion() . "\r\n" .
                       "Content-Type: text/plain; charset=\"us-ascii\"";

      mail($input_email, $reply_subject, $reply_text, $reply_headers);

      $input_comments = "NOTICE: THIS COMMENT IS AUTO-CLOSED AND AN AUTOMATIC REPLY HAS BEEN SENT TO THE SUGGESTER\n" .
                        "-----------------------------------------------------------------------------------------\n\n" .
                        $input_comments;
    }
    else {
      $input_comments = "WARNING: THIS COMMENT IS AUTO-CLOSED, BUT WAS SUBMITTED WITHOUT A VALID RETURN EMAIL\n" .
                        "------------------------------------------------------------------------------------\n\n" .
                        $input_comments;
    }
  }

  // Insert Data into Database
  db_set_active('patcomments');
  $result = db_query("INSERT INTO comment SET type=%d, source=%d, location=%d, staff='%s', comments='%s', name='%s', " .
                     "email='%s', date_received='%s', status=%d, web_info='%s', refer_to=%d",
                     $input_type, $input_source, $input_location, $input_staff, $input_comments, $input_name,
                     $input_email, $input_date, $input_status, $input_web_info, $input_refer);
  $new_com_id = db_last_insert_id('comment', 'com_id');
  db_set_active('default');

  // Form Email to Assigned Staff
  $email_from = ($input_email ? $input_email : variable_get('patcomments_suggest_email', NULL));
  patcomments_email_status($new_com_id, $email_to, $email_from);

  // Output a confirmation message
  $content .= "<p>Thanks for contacting us. Your comment has been received and routed to the appropriate person.</p>";
  $content .= "<p>If you provided contact information, you will receive a response soon.</p>";
  $content .= "<p>" . l("Return to the home page", "") . "</p>";

  drupal_set_message(t($content));
}

function _patcomments_get_locations() {
  $locations = array();
  db_set_active('patcomments');
  $result = db_query('SELECT * FROM {location} ORDER BY loc_name ASC');
  db_set_active('default');
  while ($row = db_fetch_object($result)) {
    $locations[$row->loc_id] = $row->loc_name;
  }
  return $locations;
}

function _patcomments_get_refers() {
  $refers = array();
  db_set_active('patcomments');
  $result = db_query('SELECT * FROM {refer_comment} ORDER BY refer_to ASC');
  db_set_active('default');
  while ($row = db_fetch_array($result)) {
    $refers[$row['ref_id']] = $row;
  }
  return $refers;
}

function _patcomments_get_regardings() {
  $regarding = array();
  db_set_active('patcomments');
  $result = db_query('SELECT * FROM {regarding} ORDER BY regarding ASC');
  db_set_active('default');
  while ($row = db_fetch_object($result)) {
    $regarding[$row->reg_id] = $row->regarding;
  }
  return $regarding;
}

function _patcomments_get_sources() {
  $sources = array();
  db_set_active('patcomments');
  $result = db_query('SELECT * FROM {source} ORDER BY source ASC');
  db_set_active('default');
  while ($row = db_fetch_object($result)) {
    $sources[$row->sou_id] = $row->source;
  }
  return $sources;
}

function _patcomments_get_statuses() {
  $statuses = array();
  db_set_active('patcomments');
  $result = db_query('SELECT * FROM {status} ORDER BY status ASC');
  db_set_active('default');
  while ($row = db_fetch_object($result)) {
    $statuses[$row->stat_id] = $row->status;
  }
  return $statuses;
}

function _patcomments_get_suggest_categories() {
  $categories = array();
  db_set_active('patcomments');
  $result = db_query('SELECT * FROM {suggest_categories}');
  db_set_active('default');
  while ($row = db_fetch_array($result)) {
    $categories[$row['id']] = $row;
  }
  return $categories;
}

function _patcomments_get_types() {
  $types = array();
  db_set_active('patcomments');
  $result = db_query('SELECT * FROM {type}');
  db_set_active('default');
  while ($row = db_fetch_array($result)) {
    $types[$row['ty_id']] = $row;
  }
  return $types;
}
